const gLoaderElement=document.querySelector(".loader"),gNonLoaderElements=document.querySelector("#non-loader"),getStartedForm=document.querySelector("#getStartedForm"),welcomePage=document.querySelector("#main"),appPage=document.querySelector("#plan-app"),gUserName=document.querySelector("#name"),ctaWrapper=document.querySelector(".cta-wrapper"),taskAdderForm=document.querySelector("#taskAdderForm"),taskTimer=document.querySelector("#taskTimer"),timelineContainer=document.querySelector("#timeline"),timelineList=document.querySelector("#timeline-list"),completedTasks=document.querySelector("#completedTasks"),errorMsg=document.createElement("span");errorMsg.className="error-text",errorMsg.textContent="* Please enter your name first.";const welcomeMsg=document.createElement("p");welcomeMsg.className="description";const noTasksMsg=document.createElement("p");noTasksMsg.className="no-tasks",noTasksMsg.textContent="You don't have any tasks to complete yet.";let gCounter=0;loadEventListeners();function loadEventListeners(){document.addEventListener("DOMContentLoaded",appInit),timelineList.addEventListener("click",taskModifier),completedTasks.addEventListener("click",removeCompletedTask)}function appInit(){checkUserExists()?loadToDoAppDirectly():showHomePage()}function showHomePage(){gNonLoaderElements.style.display="none",gLoaderElement.style.display="block",setTimeout(function(){gNonLoaderElements.style.display="block",gLoaderElement.style.display="none"},1e3),getStartedForm.addEventListener("submit",loadToDoApp)}function loadToDoApp(a){a.preventDefault(),""===gUserName.value?!ctaWrapper.firstElementChild.isSameNode(errorMsg)&&ctaWrapper.insertBefore(errorMsg,ctaWrapper.firstChild):(localStorage.clear(),localStorage.setItem("username",JSON.stringify(gUserName.value)),loadToDoAppDirectly())}function loadToDoAppDirectly(){const a=getUserNameFromLS();showLoaderForApp(),welcomeMsg.textContent=`Welcome ${a}`,taskAdderForm.parentElement.previousElementSibling.firstElementChild.appendChild(welcomeMsg);const b=getTasksFromLS();b.length?loadTasksForDOM():timelineContainer.insertBefore(noTasksMsg,timelineContainer.firstElementChild),taskAdderForm.addEventListener("submit",addTask)}function addTask(a){a.preventDefault();const b=validateTaskForm();if(b){const a=new Date;taskTimerArr=taskTimer.value.split(":");let b=a.getMinutes();10>b&&(b="0"+b);const c={id:generateUniqueID(),description:taskAdderForm.firstElementChild.value,priority:taskAdderForm.children[2].children[0].value,isComplete:!1,reminder:{h:+taskTimerArr[0],m:+taskTimerArr[1]},date_created:{day:a.getDate(),month:a.getMonth(),year:a.getFullYear()},time_created:{h:a.getHours(),m:b}};addTaskToLS(c);try{isTaskPendingInLS();timelineContainer.removeChild(noTasksMsg)}catch(a){console.log()}setTimeout(function(){addTaskToDOM(),taskAdderForm.reset()},1e3)}}function taskModifier(a){let b;if("deleteTask"===a.target.parentElement.parentElement.className){a.preventDefault(),b=a.target.parentElement.parentElement.getAttribute("data-id"),a.target.parentElement.parentElement.parentElement.parentElement.parentElement.remove(),removeTaskFromLS(b);const c=getTasksFromLS();0==c.length&&timelineContainer.appendChild(noTasksMsg)}if("isTaskComplete"===a.target.className){b=a.target.getAttribute("data-id"),taskCompleted(b),a.target.parentElement.parentElement.parentElement.remove();const c=isTaskPendingInLS();c&&timelineContainer.insertBefore(noTasksMsg,timelineContainer.firstChild)}}function removeCompletedTask(a){a.preventDefault();let b=a.target.parentElement.parentElement.getAttribute("data-id");a.target.parentElement.parentElement.parentElement.parentElement.remove(),removeTaskFromLS(b)}function taskCompleted(a){const b=getTasksFromLS();b.forEach(b=>{b.id==a&&(b.isComplete=!0)}),addTaskToCompletedList(a),updateLSTasks(b)}function addTaskToCompletedList(a){const b=document.createElement("div");b.className="completed-task-card";const c=getTaskFromLSUsingId(a);b.innerHTML=`
        <div class="completed-task-card-header">
            <span class="${c.priority}-priority">${c.priority.toUpperCase()} Priority</span>
            <span class="time-added">(Added: ${timeConvertor(c.time_created.h,c.time_created.m)})</span>
            <a class="completed-task-remove deleteTask" data-id="${c.id}" href="#"><i class="fas fa-trash"></i></a>
        </div>
        <div class="completed-task-card-body">
            <p class="completed-task-description">
                ${c.description}
            </p>
        </div>
        <div class="completed-task-card-footer">
            <p><i class="fas fa-stopwatch ${c.priority}-priority"></i> Task Expired</p>
        </div>`,completedTasks.appendChild(b)}function updateLSTasks(a){localStorage.setItem("tasks",JSON.stringify(a))}function getTasksFromLS(){let a;return a=null===localStorage.getItem("tasks")?[]:JSON.parse(localStorage.getItem("tasks")),a}function isTaskPendingInLS(){const a=getTasksFromLS();let b=!1;return a.forEach(a=>{b=!!a.isComplete}),b}function getTaskFromLSUsingId(a){const b=getTasksFromLS();let c;return b.forEach(b=>{b.id==a&&(c=b)}),c}function lastTaskFromLS(){const a=getTasksFromLS();let b;return b=0==a.length?0:a[a.length-1],b}function addTaskToLS(a){const b=getTasksFromLS();b.push(a),localStorage.setItem("tasks",JSON.stringify(b))}function removeTaskFromLS(a){const b=getTasksFromLS();b.forEach((c,d)=>{c.id==a&&b.splice(d,1)}),localStorage.setItem("tasks",JSON.stringify(b))}function checkUserExists(){let a=!1;return a=null!==localStorage.getItem("username"),a}function getUserNameFromLS(){let a;return a=null===localStorage.getItem("username")?[]:JSON.parse(localStorage.getItem("username")),a}function isTaskComplete(a){const b=getTasksFromLS();b.forEach(b=>{if(b.id==a)return!!b.isComplete})}function showLoaderForApp(){welcomePage.style.display="none",gLoaderElement.style.display="block",setTimeout(function(){gLoaderElement.style.display="none",appPage.style.display="block"},1e3)}function validateTaskForm(){return""===taskAdderForm.firstElementChild.value?(taskAdderForm.firstElementChild.classList.add("error"),!1):""===taskAdderForm.children[1].children[1].value?(taskAdderForm.children[1].children[1].classList.add("error"),!1):"none"!==taskAdderForm.children[2].children[0].value||(taskAdderForm.children[2].children[0].classList.add("error"),!1)}function loadTasksForDOM(){const a=getTasksFromLS();a.forEach(a=>{if(!a.isComplete){const b=document.createElement("li");b.className="timeline-list-item",b.innerHTML=`
                <div class="timeline-item-content">
                    <div class="task-info">
                        <span class="${a.priority}-priority">${a.priority.toUpperCase()} Priority</span>
                        <span>(Added: ${timeConvertor(a.time_created.h,a.time_created.m)})</span>
                        <a class="deleteTask" data-id="${a.id}" href="#"><i class="fas fa-trash"></i></a>
                    </div>
                    <p class="task-description">${a.description}</p>
                    <div class="task-info-bottom" id="task-bottom-info">
                        <p class="task-time-left"><i class="fas fa-stopwatch ${a.priority}-priority"></i> ${taskTimeLeftCalc(a.date_created,a.time_created,a.reminder)}</p>
                        <input type="checkbox" data-id="${a.id}" class="isTaskComplete">
                    </div>
                </div>`,timelineList.appendChild(b)}else{const b=document.createElement("div");b.className="completed-task-card",b.innerHTML=`
                <div class="completed-task-card-header">
                    <span class="${a.priority}-priority">${a.priority.toUpperCase()} Priority</span>
                    <span class="time-added">(Added: ${timeConvertor(a.time_created.h,a.time_created.m)})</span>
                    <a class="completed-task-remove deleteTask" data-id="${a.id}" href="#"><i class="fas fa-trash"></i></a>
                </div>
                <div class="completed-task-card-body">
                    <p class="completed-task-description">
                        ${a.description}
                    </p>
                </div>
                <div class="completed-task-card-footer">
                    <p><i class="fas fa-stopwatch ${a.priority}-priority"></i> Task Expired</p>
                </div>`,completedTasks.appendChild(b)}})}function addTaskToDOM(){const a=document.createElement("li");a.className="timeline-list-item";const b=lastTaskFromLS();a.innerHTML=`
        <div class="timeline-item-content">
            <div class="task-info">
                <span class="${b.priority}-priority">${b.priority.toUpperCase()} Priority</span>
                <span>(Added: ${timeConvertor(b.time_created.h,b.time_created.m)})</span>
                <a class="deleteTask" data-id="${b.id}" href="#"><i class="fas fa-trash"></i></a>
            </div>
            <p class="task-description">${b.description}</p>
            <div class="task-info-bottom" id="task-bottom-info">
                <p class="task-time-left"><i class="fas fa-stopwatch ${b.priority}-priority"></i> ${taskTimeLeftCalc(b.date_created,b.time_created,b.reminder)}</p>
                <input type="checkbox" data-id="${b.id}" class="isTaskComplete">
            </div>
        </div>
        `,timelineList.appendChild(a)}function timeConvertor(a,b){return 12<a?`${a-12}:${b} PM`:`${a}:${b} AM`}function generateUniqueID(){const a=getTasksFromLS();return 0===a.length?1:a[a.length-1].id+1}function taskTimeLeftCalc(a,b,c){const d=new Date;d.setMonth(a.month),d.setDate(a.day),d.setHours(c.h),d.setMinutes(c.m),d.setSeconds(0);const e=new Date().getTime(),f=d.getTime()-e,g=Math.floor(f%86400000/3600000),h=Math.floor(f%3600000/60000);return 0>g&0>h?`Task Expired`:`${g} Hour(s) ${h} Minute(s) Left`}